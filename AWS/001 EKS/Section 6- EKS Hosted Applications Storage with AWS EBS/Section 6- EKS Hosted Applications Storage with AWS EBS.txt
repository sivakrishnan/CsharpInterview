
53. Step-01: EKS Storage Introduction ###### Duration:  9mins

EKS Storage:

	1) In-Tree EBS Provisioner----->Legacy, will deprecated soon
	2) EBS CSI Driver: Elastic Block Storage - Container Storage Interface-
	3) EFS CSI Driver: Elastic File Systems - Container Storage Interface-
	4) FSx for Luster CSI
	
Elastic Block Storage - Introduction

-> EBS Provides, block level storage volumes for use with EC2 and Container Instances.
-> we can mount these volumes as devices on our EC2 and Container instances.
-> EBS Volumes that are attached to the instances, are exposed as storage volumes that persist independently from the life of EC2 or container instances.
-> We can dynamically change the configuration of a volumes attached to an instances.
-> AWS recommands EBS for data that must be quickly accessible, and requires long term persistance.
-> EBS is well suited to both, database style applications, that rely on random reads and writes, and to throughput-intensive applications, that 
performs long, continous reads and writes



Kubernetes Object											YAML File

Storage Class												01-storage-class.yml
Persistent Volume Claim										02-persistent-volume-claim.yml
Config Map													03-UserManagement-ConfigMap.yml
Deployment, Environment Variables, Volumes, VolumeMounts	04-mysql-deployment.yml
ClusterIP Service											05-mysql-clusterip-service.yml
Deployment, Environment Variables							06-UserManagementMicroservice-Deployment.yml
NodePort Service											07-UserManagement-Service.yml


54. Step-02: Install EBS CSI Driver ###### Duration:  6 mins


Step-01: Introduction

	Create IAM Policy for EBS
	Associate IAM Policy to Worker Node IAM Role
	Install EBS CSI Driver

Step-02: Create IAM policyy

		Go to Services -> IAM
		Create a Policy
		Select JSON tab and copy paste the below JSON
		
			
			{
			  "Version": "2012-10-17",
			  "Statement": [
				{
				  "Effect": "Allow",
				  "Action": [
					"ec2:AttachVolume",
					"ec2:CreateSnapshot",
					"ec2:CreateTags",
					"ec2:CreateVolume",
					"ec2:DeleteSnapshot",
					"ec2:DeleteTags",
					"ec2:DeleteVolume",
					"ec2:DescribeInstances",
					"ec2:DescribeSnapshots",
					"ec2:DescribeTags",
					"ec2:DescribeVolumes",
					"ec2:DetachVolume"
				  ],
				  "Resource": "*"
				}
			  ]
			}
			
		Review the same in Visual Editor
		Click on Review Policy
		Name: Amazon_EBS_CSI_Driver
		Description: Policy for EC2 Instances to access Elastic Block Store
		Click on Create Policy
		
Step-03: Get the IAM role Worker Nodes using and Associate this policy to that role

	# Get Worker node IAM Role ARN
	kubectl -n kube-system describe configmap aws-auth
	
	# from output check rolearn
	rolearn: arn:aws:iam::180789647333:role/eksctl-eksdemo1-nodegroup-eksdemo-NodeInstanceRole-IJN07ZKXAWNN
	
	Go to Services -> IAM -> Roles
	Search for role with name eksctl-eksdemo1-nodegroup and open it
	Click on Permissions tab
	Click on Attach Policies
	Search for Amazon_EBS_CSI_Driver and click on Attach Policy
	
Step-04: Deploy Amazon EBS CSI Driver

	Verify kubectl version, it should be 1.14 or later
	
		kubectl version --client --short
	
	Deploy Amazon EBS CSI Driver
	
		# Deploy EBS CSI Driver
		kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=master"

		# Verify ebs-csi pods running
		kubectl get pods -n kube-system

55. Step-03: Create Kubernetes Manifests for Storage Class, PVC and ConfigMap ###### Duration:  11 mins

Step-01: Introduction
We are going to create a MySQL Database with persistence storage using AWS EBS Volumes

Kubernetes Object											YAML File
Storage Class												01-storage-class.yml
Persistent Volume Claim										02-persistent-volume-claim.yml
Config Map													03-UserManagement-ConfigMap.yml


56. Step-04: Create Kubernetes Manifests for MySQL Deployment & ClusterIP Service ###### Duration:  13 mins

Deployment, Environment Variables, Volumes, VolumeMounts	04-mysql-deployment.yml
ClusterIP Service											05-mysql-clusterip-service.yml


57. Step-05: Test by connecting to MySQL Database ###### Duration:  4 mins

# Create MySQL Database
kubectl apply -f kube-manifests/

# List Storage Classes
kubectl get sc

# List PVC
kubectl get pvc 

# List PV
kubectl get pv

# List pods
kubectl get pods 

# List pods based on  label name
kubectl get pods -l app=mysql


Connect to MySQL Database


# Connect to MYSQL Database
kubectl run -it --rm --image=mysql:5.6 --restart=Never mysql-client -- mysql -h mysql -pdbpassword11

[or]

# Use mysql client latest tag
kubectl run -it --rm --image=mysql:latest --restart=Never mysql-client -- mysql -h mysql -pdbpassword11

# Verify usermgmt schema got created which we provided in ConfigMap
mysql> show schemas;

58. Step-06: Storage References ###### Duration:  3 mins

59. Step-07: Create Kubernetes Manifests for User Management Microservice Deployment ###### Duration:  10 mins

Kubernetes Object										YAML File

Deployment, Environment Variables						06-UserManagementMicroservice-Deployment.yml
NodePort Service										07-UserManagement-Service.yml

60. Step-08: Test User Management Microservice with MySQL Database in Kubernetes ###### Duration:  4 mins


# Create Deployment & NodePort Service
kubectl apply -f kube-manifests/

# List Pods
kubectl get pods

# Verify logs of Usermgmt Microservice pod
kubectl logs -f <Pod-Name>

# Verify sc, pvc, pv
kubectl get sc,pvc,pv

Access Application

# List Services
kubectl get svc

# Get Public IP
kubectl get nodes -o wide

# Access Health Status API for User Management Service
http://<EKS-WorkerNode-Public-IP>:31231/usermgmt/health-status

61. Step-09: Test User Management Microservice UMS using Postman ###### Duration:  10 mins

 Verify Users in MySQL Database
 
 
# Connect to MYSQL Database
kubectl run -it --rm --image=mysql:5.6 --restart=Never mysql-client -- mysql -h mysql -u root -pdbpassword11

# Verify usermgmt schema got created which we provided in ConfigMap
mysql> show schemas;
mysql> use usermgmt;
mysql> show tables;
mysql> select * from users;


Clean-Up

Delete all k8s objects created as part of this section
# Delete All
kubectl delete -f kube-manifests/

# List Pods
kubectl get pods

# Verify sc, pvc, pv
kubectl get sc,pvc,pv