
77. Step-01: AWS Load Balancers Introduction ###### Duration:     9 mins

AWS Load Balancer Types
	Classic Load Balancer
	Network Load Balancer
	Application Load Balancer (k8s Ingress)

78. Step-02: Create EKS Private Node Group ###### Duration:     6 mins

Step-01: Introduction

We are going to create a node group in VPC Private Subnets
We are going to deploy workloads on the private node group wherein workloads will be running private subnets 
and load balancer gets created in public subnet and accessible via internet.

Step-02: Delete existing Public Node Group in EKS Cluster

# Get NodeGroups in a EKS Cluster

eksctl get nodegroup --cluster=<Cluster-Name>
eksctl get nodegroup --cluster=eksdemo1

# Delete Node Group - Replace nodegroup name and cluster name

eksctl delete nodegroup <NodeGroup-Name> --cluster <Cluster-Name>
eksctl delete nodegroup eksdemo1-ng-public1 --cluster eksdemo1

Step-03: Create EKS Node Group in Private Subnets

Create Private Node Group in a Cluster

Key option for the command is --node-private-networking

eksctl create nodegroup --cluster=eksdemo1 \
                        --region=us-east-1 \
                        --name=eksdemo1-ng-private1 \
                        --node-type=t3.medium \
                        --nodes-min=2 \
                        --nodes-max=4 \
                        --node-volume-size=20 \
                        --ssh-access \
                        --ssh-public-key=kube-demo \
                        --managed \
                        --asg-access \
                        --external-dns-access \
                        --full-ecr-access \
                        --appmesh-access \
                        --alb-ingress-access \
                        --node-private-networking  
						
eksctl create nodegroup --cluster=eksdemo1 --region=us-east-1 --name=eksdemo1-ng-private1 --node-type=t3.medium --nodes-min=2 --nodes-max=4 --node-volume-size=20 --ssh-access --ssh-public-key=kube-demo --managed --asg-access --external-dns-access --full-ecr-access --appmesh-access --alb-ingress-access --node-private-networking  

this will take 5 mins to create

Step-04: Verify if Node Group created in Private Subnets

Verify External IP Address for Worker Nodes
External IP Address should be none if our Worker Nodes created in Private Subnets
kubectl get nodes -o wide

Subnet Route Table Verification - Outbound Traffic goes via NAT Gateway

Verify the node group subnet routes to ensure it created in private subnets

Go to Services -> EKS -> eksdemo -> eksdemo1-ng1-private

Click on Associated subnet in Details tab
Click on Route Table Tab.

We should see that internet route via NAT Gateway (0.0.0.0/0 -> nat-xxxxxxxx)

79. Step-03: EKS with Classic Load Balancers Demo ###### Duration:     10 mins

Step-01: Create AWS Classic Load Balancer Kubernetes Manifest & Deploy

04-ClassicLoadBalancer.yml

apiVersion: v1
kind: Service
metadata:
  name: clb-usermgmt-restapp
  labels:
    app: usermgmt-restapp
spec:
  type: LoadBalancer  # Regular k8s Service manifest with type as LoadBalancer
  selector:
    app: usermgmt-restapp     
  ports:
  - port: 80
    targetPort: 8095
	
Deploy all Manifest

# Deploy all manifests
kubectl apply -f kube-manifests/

# List Services (Verify newly created CLB Service)
kubectl get svc

# Verify Pods
kubectl get pods

Step-02: Verify the deployment

Verify if new CLB got created
Go to Services -> EC2 -> Load Balancing -> Load Balancers
CLB should be created
Copy DNS Name (Example: a85ae6e4030aa4513bd200f08f1eb9cc-7f13b3acc1bcaaa2.elb.us-east-1.amazonaws.com)
Go to Services -> EC2 -> Load Balancing -> Target Groups
Verify the health status, we should see active.
Access Application
# Access Application
http://<CLB-DNS-NAME>/usermgmt/health-status


80. Step-04: EKS with Network Load Balancers Demo ###### Duration:     7 mins

Step-01: Create AWS Network Load Balancer Kubernetes Manifest & Deploy

04-NetworkLoadBalancer.yml

	apiVersion: v1
		kind: Service
		metadata:
		  name: nlb-usermgmt-restapp
		  labels:
			app: usermgmt-restapp
		  annotations:
			service.beta.kubernetes.io/aws-load-balancer-type: nlb    # To create Network Load Balancer
		spec:
		  type: LoadBalancer # Regular k8s Service manifest with type as LoadBalancer
		  selector:
			app: usermgmt-restapp     
		  ports:
		  - port: 80
			targetPort: 8095
	
Deploy all Manifest

# Deploy all manifests
kubectl apply -f kube-manifests/

# List Services (Verify newly created NLB Service)
kubectl get svc

# Verify Pods
kubectl get pods

Step-02: Verify the deployment

Verify if new CLB got created

Go to Services -> EC2 -> Load Balancing -> Load Balancers
CLB should be created
Copy DNS Name (Example: a85ae6e4030aa4513bd200f08f1eb9cc-7f13b3acc1bcaaa2.elb.us-east-1.amazonaws.com)
Go to Services -> EC2 -> Load Balancing -> Target Groups
Verify the health status, we should see active.

Access Application

# Access Application
http://<NLB-DNS-NAME>/usermgmt/health-status

Step-03: Clean Up

# Delete all Objects created
kubectl delete -f kube-manifests/

# Verify current Kubernetes Objects
kubectl get all

81. Connect with Me !!! 1min