Step 1: Pull Docker Image from Docker Hub

# List Docker images (should be empty if none are pulled yet)
docker images

# Pull Docker image from Docker Hub
docker pull stacksimplify/mynginx:v1

# Alternatively, pull from GitHub Packages (no download limits)
docker pull ghcr.io/stacksimplify/mynginx:v1

# List Docker images to confirm the image is pulled
docker images

----------------------------------------------------------------------------------

Step 2: Run the Downloaded Docker Image

# Run Docker Container
docker run --name <CONTAINER-NAME> -p <HOST_PORT>:<CONTAINER_PORT> -d <IMAGE_NAME>:<TAG>

# Example using Docker Hub image:
docker run --name myapp1 -p 8080:80 -d stacksimplify/mynginx:v1

# Or using GitHub Packages image:
docker run --name myapp1 -p 8080:80 -d ghcr.io/stacksimplify/mynginx:v1

----------------------------------------------------------------------------------

Step 3: List Running Docker Containers

# List only running containers
docker ps

# List all containers (including stopped ones)
docker ps -a

# List only container IDs of running containers
docker ps -q

# List only container IDs of running containers and (including stopped ones)
docker ps -aq

----------------------------------------------------------------------------------

Step 4: Connect to Docker Container Terminal

# Connect to the container's terminal
docker exec -it <CONTAINER-NAME> /bin/sh

# Example:
docker exec -it myapp1 /bin/sh

# Inside the container, you can run commands:
ls
hostname
exit  # To exit the container's terminal


	Execute Commands Directly:
	
	# List directory contents inside the container
	docker exec -it myapp1 ls

	# Get the hostname of the container
	docker exec -it myapp1 hostname

	# Print environment variables
	docker exec -it myapp1 printenv

	# Check disk space usage
	docker exec -it myapp1 df -h
	
----------------------------------------------------------------------------------

Step 5: Stop and Start Docker Containers

# Stop a running container
docker stop <CONTAINER-NAME>

# Example:
docker stop myapp1

# Verify the container has stopped
docker ps

# Test if the application is down
curl http://localhost:8080

# Start the stopped container
docker start <CONTAINER-NAME>

# Example:
docker start myapp1

# Verify the container is running
docker ps

# Test if the application is back up
curl http://localhost:8080

----------------------------------------------------------------------------------

Step 6: Remove Docker Containers

# Stop the container if it's still running
docker stop <CONTAINER-NAME>
docker stop myapp1

# Remove the container
docker rm <CONTAINER-NAME>
docker rm myapp1

# Or stop and remove the container in one command
docker rm -f <CONTAINER-NAME>
docker rm -f myapp1

----------------------------------------------------------------------------------

Step 7: Remove Docker Images

# List Docker images
docker images

# Remove Docker image using Image ID
docker rmi <IMAGE-ID>

# Example:
docker rmi abc12345def6

# Remove Docker image using Image Name and Tag
docker rmi <IMAGE-NAME>:<IMAGE-TAG>

# Example:
docker rmi stacksimplify/mynginx:v1