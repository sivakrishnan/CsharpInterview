Step 1: Create Dockerfile and Customized index.html


# Use nginx:alpine-slim as base Docker Image
FROM nginx:alpine-slim

# Custom Labels
LABEL maintainer="Kalyan Reddy Daida"  
LABEL version="1.0"
LABEL description="A simple Nginx Application"
# OCI Labels
LABEL org.opencontainers.image.authors="Kalyan Reddy Daida"
LABEL org.opencontainers.image.title="Nginx Alpine Slim Application"
LABEL org.opencontainers.image.description="A lightweight Nginx application built on Alpine."
LABEL org.opencontainers.image.version="1.0"
LABEL org.opencontainers.image.revision="1234567890abcdef" 
LABEL org.opencontainers.image.created="2024-10-14T08:30:00Z"
LABEL org.opencontainers.image.url="https://github.com/stacksimplify/docker-in-a-weekend"
LABEL org.opencontainers.image.source="https://github.com/stacksimplify/docker-in-a-weekend/tree/main/04-Dockerfile-LABELS/Dockerfiles"
LABEL org.opencontainers.image.documentation="https://github.com/stacksimplify/docker-in-a-weekend/tree/main/04-Dockerfile-LABELS"
LABEL org.opencontainers.image.vendor="STACKSIMPLIFY"
LABEL org.opencontainers.image.licenses="Apache-2.0"

# Using COPY to copy a local file
COPY index.html /usr/share/nginx/html

Create a simple index.html:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>StackSimplify</title>
  <style>
    body { 
      font-family: Arial, sans-serif; 
      text-align: center; 
      padding: 50px; 
      background-color: rgb(227, 213, 180);
    }
    h1 { font-size: 50px; }
    h2 { font-size: 40px; }
    h3 { font-size: 30px; }
    p { font-size: 20px; }
  </style>
</head>
<body>
  <h1>Welcome to StackSimplify</h1>
  <h2>Dockerfile: Nginx Alpine Slim Docker Image with custom LABELS and OCI LABELS</h2>
  <p>Learn technology through practical, real-world demos.</p>
  <p>Application Version: v1</p>
</body>
</html>

------------------------------------------------------------------------
Step 2: Build Docker Image and Run It

# Change to the directory containing your Dockerfile
cd Dockerfiles

# Build the Docker image
docker build -t [IMAGE-NAME]:[IMAGE-TAG] .

# Example:
docker build -t demo4-dockerfile-labels:v1 .

# Important Notes:
# 1. [IMAGE-TAG] is optional; if not provided, it defaults to "latest".
# 2. Best practice is to use explicit tags.

# List Docker Images
docker images

# Run the Docker container
docker run --name mylabels-demo -p 8080:80 -d demo4-dockerfile-labels:v1

# Access the application in your browser
http://localhost:8080

------------------------------------------------------------------------

Step 4: Docker Image Inspect Commands
Use docker inspect to retrieve detailed information about Docker images.

# Inspect the Docker image
docker image inspect [IMAGE-NAME]:[IMAGE-TAG]

# Example:
docker image inspect demo4-dockerfile-labels:v1

# Get the creation date of the Docker image
docker inspect --format='{{.Created}}' [IMAGE-NAME]:[IMAGE-TAG]

# Example:
docker inspect --format='{{.Created}}' demo4-dockerfile-labels:v1

# Get the Docker image labels (unformatted)
docker inspect --format='{{json .Config.Labels}}' [IMAGE-NAME]:[IMAGE-TAG]

# Example:
docker image inspect --format='{{json .Config.Labels}}' demo4-dockerfile-labels:v1

# Get the Docker image labels (formatted with jq)
docker image inspect --format='{{json .Config.Labels}}' [IMAGE-NAME]:[IMAGE-TAG] | jq

# Example:
docker image inspect --format='{{json .Config.Labels}}' demo4-dockerfile-labels:v1 | jq

------------------------------------------------------------------------

Step 5: Docker Container Inspect Commands
Use docker inspect to retrieve detailed information about Docker containers.

# Inspect the Docker container
docker inspect [CONTAINER-NAME or CONTAINER-ID]

# Example:
docker inspect mylabels-demo

# Get the IP address of the container
docker inspect --format='{{.NetworkSettings.IPAddress}}' [CONTAINER-NAME or CONTAINER-ID]

# Example:
docker inspect --format='{{.NetworkSettings.IPAddress}}' mylabels-demo

# Inspect container state (running, paused, stopped)
docker inspect --format='{{.State.Status}}' [CONTAINER-NAME or CONTAINER-ID]

# Example:
docker inspect --format='{{.State.Status}}' mylabels-demo

# Inspect exposed ports
docker inspect --format='{{json .Config.ExposedPorts}}' [CONTAINER-NAME or CONTAINER-ID]

# Example:
docker inspect --format='{{json .Config.ExposedPorts}}' mylabels-demo

# Inspect network details of the container (formatted with jq)
docker inspect --format='{{json .NetworkSettings}}' [CONTAINER-NAME or CONTAINER-ID] | jq

# Example:
docker inspect --format='{{json .NetworkSettings}}' mylabels-demo | jq