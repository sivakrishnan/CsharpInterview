Step 1: Create Sample Python Application and Dockerfile

Create a Sample Python App
File Name: app.py



from flask import Flask
import os
import pwd
import grp

app = Flask(__name__)

@app.route('/')
def hello_world():
    # Get the current user's ID and name
    user_id = os.getuid()
    user_name = pwd.getpwuid(user_id).pw_name

    # Get the current group's ID and name
    group_id = os.getgid()
    group_name = grp.getgrgid(group_id).gr_name

    # Return a response displaying both the user and the group
    return f'Hello from user: {user_name} (UID: {user_id}) and group: {group_name} (GID: {group_id})!'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

-------------------------------------------------------------------------------------------------------
Create Dockerfile with USER Instruction

# Use the official Python image as the base image
# This image comes with Python pre-installed
FROM python

# Set the working directory inside the container to /usr/src/app
# All subsequent commands will be run from this directory
WORKDIR /usr/src/app

# Copy the contents of the current directory on the host (where the Dockerfile is located) to /usr/src/app in the container
# using pattern matching COPY command
COPY *.py .

# Install the Flask package using pip
# The --no-cache-dir option ensures no cache is used, reducing the image size
RUN pip install --no-cache-dir flask

# Explicitly set the USER environment variable for the non-root user
ENV USER=mypythonuser
ENV GROUP=mypythongroup

# Create a new group called 'mygroup' and a non-root user 'myuser' within this group
# -m creates a home directory for the user
RUN groupadd -r ${GROUP} && useradd -m -r -g ${GROUP} ${USER}

# Set ownership of the /usr/src/app directory to the non-root user 'myuser'
# This ensures that 'myuser' has the necessary permissions to access the app directory
RUN chown -R ${USER}:${GROUP} /usr/src/app

# Switch to the non-root user 'mypythonuser' so that the application does not run as root
USER ${USER}

# Command to run the Python application
# This command starts the Flask app when the container starts
CMD ["python", "app.py"]

# Expose port 5000 to the host, so the Flask app is accessible externally
EXPOSE 5000

-------------------------------------------------------------------------------------------------------

Step 2: Build Docker Image and Run It

# Change to the directory containing your Dockerfile
cd DockerFiles

# Build the Docker Image
docker build -t demo13-dockerfile-user:v1 .

# Run the Docker Container
docker run --name my-user-demo -p 5000:5000 -d demo13-dockerfile-user:v1

# List Docker Containers
docker ps

# Expected Output:
# CONTAINER ID   IMAGE                       COMMAND             CREATED          STATUS          PORTS                    NAMES
# abcd1234efgh   demo13-dockerfile-user:v1   "python app.py"     10 seconds ago   Up 8 seconds    0.0.0.0:5000->5000/tcp   my-user-demo

# Access the application in your browser
http://localhost:5000

Expected Output in Browser:
Hello from user: mypythonuser (UID: 1000) and group: mypythongroup (GID: 1000)!


-------------------------------------------------------------------------------------------------------

Verify User and Group Inside the Container:

# Connect to the container
docker exec -it my-user-demo /bin/bash
Observation:
1. You should see you have logged into container using non-root user "mypythonuser"

# Inside the container, list files and their ownership
ls -l
Observation:
1. app.py should have the user as mypythonuser and group as mypythongroup


# Expected Output:
# total 8
# -rw-r--r--    1 mypythonuser mypythongroup     629 Oct 13 12:00 app.py

# Check environment variables
env

# Look for USER and GROUP variables
# USER=mypythonuser
# GROUP=mypythongroup

# Exit the container shell
exit


-------------------------------------------------------------------------------------------------------

Step-3: How do you connect to container with root user which is running its process with non-root user ?

# Connect to Container with Root User
docker exec --user root -it my-user-demo /bin/bash


-------------------------------------------------------------------------------------------------------

Step 4: Stop and Remove Container and Images

# Stop and remove the container
docker rm -f my-user-demo

# Remove the Docker images from local machine
docker rmi stacksimplify/demo13-dockerfile-user:v1
docker rmi demo13-dockerfile-user:v1

# List Docker Images to confirm removal
docker images


-------------------------------------------------------------------------------------------------------
