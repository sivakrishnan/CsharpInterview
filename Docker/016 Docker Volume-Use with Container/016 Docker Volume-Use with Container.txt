
Step 1: Start a Container with a Volume Using --mount Flag

Single-Line Format
# Start a container with a named volume using the --mount flag
docker run --name volume-demo1 -p 8090:80 --mount type=volume,source=myvol101,target=/myapps -d nginx:alpine-slim



-------------------------------------------------------------------------------------------------------

Readable Format
docker run \
    --name volume-demo1 \
    -p 8090:80 \
    --mount type=volume,source=myvol101,target=/myapps \
    -d \
    nginx:alpine-slim



-------------------------------------------------------------------------------------------------------


Verify the Container and Volume Mount

# List Docker Containers
docker ps

# Format the output for clarity
docker ps --format "table {{.Image}}\t{{.Names}}\t{{.Status}}\t{{.ID}}\t{{.Ports}}"

# Connect to the container
docker exec -it volume-demo1 /bin/sh

# Inside the container, check the mounted volumes
df -h


										C:\Users\CIPL1543>docker exec -it volume-demo1 /bin/sh
										/ # df -h
										Filesystem                Size      Used Available Use% Mounted on
										overlay                1006.9G      4.5G    951.1G   0% /
										tmpfs                    64.0M         0     64.0M   0% /dev
										tmpfs                     7.8G         0      7.8G   0% /sys/fs/cgroup
										shm                      64.0M         0     64.0M   0% /dev/shm
										/dev/sdc               1006.9G      4.5G    951.1G   0% /myapps
										/dev/sdc               1006.9G      4.5G    951.1G   0% /etc/resolv.conf
										/dev/sdc               1006.9G      4.5G    951.1G   0% /etc/hostname
										/dev/sdc               1006.9G      4.5G    951.1G   0% /etc/hosts
										tmpfs                     7.8G         0      7.8G   0% /proc/acpi
										tmpfs                    64.0M         0     64.0M   0% /proc/interrupts
										tmpfs                    64.0M         0     64.0M   0% /proc/kcore
										tmpfs                    64.0M         0     64.0M   0% /proc/keys
										tmpfs                    64.0M         0     64.0M   0% /proc/timer_list
										tmpfs                     7.8G         0      7.8G   0% /sys/firmware

# Navigate to the mounted directory
cd /myapps

# List contents (should be empty initially)
ls

############################create file 

C:\Users\CIPL1543>docker exec -it volume-demo1 /bin/sh
/ # cd /myapps
/myapps # echo "siva" > krish.txt

# Exit the container shell
exit


-------------------------------------------------------------------------------------------------------

Inspect the Docker Container

# Inspect the container's mounts
docker inspect volume-demo1

# Extract just the Mounts information in JSON format
docker inspect --format='{{json .Mounts}}' volume-demo1

# For better readability, pipe the output to 'jq' (JSON processor)
docker inspect --format='{{json .Mounts}}' volume-demo1 | jq


-------------------------------------------------------------------------------------------------------

Step 2: Start a Container with a Volume Using -v Flag

Single-Line Format
# Start a container with a named volume using the -v flag
docker run --name volume-demo2 -p 8091:80 -v myvol102:/myapps -d nginx:alpine-slim


-------------------------------------------------------------------------------------------------------


Readable Format
docker run \
    --name volume-demo2 \
    -p 8091:80 \
    -v myvol102:/myapps \
    -d \
    nginx:alpine-slim


-------------------------------------------------------------------------------------------------------

Verify the Container and Volume Mount

# List Docker Containers
docker ps

# Format the output for clarity
docker ps --format "table {{.Image}}\t{{.Names}}\t{{.Status}}\t{{.ID}}\t{{.Ports}}"

# Connect to the container
docker exec -it volume-demo2 /bin/sh

# Inside the container, check the mounted volumes
df -h

# Navigate to the mounted directory
cd /myapps

# List contents (should be empty initially)
ls

# Exit the container shell
exit



-------------------------------------------------------------------------------------------------------

Clean-Up
After completing the steps, it's good practice to clean up the Docker resources to free up system resources.

# Stop and remove all containers
docker rm -f $(docker ps -aq)

# Remove all Docker images (use with caution)
docker rmi $(docker images -q)

# Remove the volumes if desired
docker volume rm myvol101 myvol102

# Verify that volumes are removed
docker volume ls



-------------------------------------------------------------------------------------------------------