
Step 1: Create a Docker Image with Nginx Static Content

Step 1.1: Review Dockerfile
Dockerfile

# Use nginx:alpine-slim as base Docker Image
FROM nginx:alpine-slim

# OCI Labels
LABEL org.opencontainers.image.authors="Kalyan Reddy Daida"
LABEL org.opencontainers.image.title="Demo: Populate Docker Volumes with Containers"
LABEL org.opencontainers.image.description="A Dockerfile demo illustrating how to populate Docker volumes using containers and serving static content with NGINX."
LABEL org.opencontainers.image.version="1.0"

# Using COPY to copy local static content to Nginx HTML directory
COPY ./static-content/ /usr/share/nginx/html


-------------------------------------------------------------------------------------------------------

Step 1.2: Review Static Content
Directory Structure:

Dockerfiles/
├── Dockerfile
└── static-content/
    ├── app1/
    │   └── index.html
    ├── file1.html
    ├── file2.html
    ├── file3.html
    ├── file4.html
    ├── file5.html
    └── index.html

-------------------------------------------------------------------------------------------------------

Step 1.3: Build a Docker Image
# Change Directory
cd Dockerfiles

# Build Docker Image
docker build -t <IMAGE_NAME>:<TAG> .
docker build -t mynginx-static:v1 .

# List Docker Images
docker images

# Run Docker Container and Verify
docker run --name=volumes-demo-base-container -p 8090:80 -d mynginx-static:v1

# List Docker Containers
docker ps
docker ps --format "table {{.Image}}\t{{.Names}}\t{{.Status}}\t{{.ID}}\t{{.Ports}}"

# Access Application
http://localhost:8090
Observation:
1. We have all our static content present and accessible

-------------------------------------------------------------------------------------------------------

Step 2: Populate a Volume Using Container

Option 1: Using --mount Flag
The --mount flag provides a more verbose and explicit syntax for mounting volumes.

Step 2.1: Using --mount Flag with Read-Write Access
Command:

# Single Line Format
docker run --name volume-demo1 -p 8091:80 --mount type=volume,source=myvol103,target=/usr/share/nginx/html -d mynginx-static:v1

# Readable Multi-Line Format
docker run \
    --name volume-demo1 \
    -p 8091:80 \
    --mount type=volume,source=myvol103,target=/usr/share/nginx/html \
    -d \
    mynginx-static:v1
Explanation:

--name volume-demo1: Names the container volume-demo1.
-p 8091:80: Maps host port 8091 to container port 80.
--mount type=volume,source=myvol103,target=/usr/share/nginx/html: Mounts the named volume myvol103 to /usr/share/nginx/html inside the container.
-d mynginx-static:v1: Runs the container in detached mode using the mynginx-static:v1 image.


-------------------------------------------------------------------------------------------------------

Step 2.2: Verify the Volume Mount
# List Docker Containers
docker ps
docker ps --format "table {{.Image}}\t{{.Names}}\t{{.Status}}\t{{.ID}}\t{{.Ports}}"

# Connect to the Container
docker exec -it volume-demo1 /bin/sh

# Inside the Container: Check Disk Usage
df -h

# Navigate to the Mounted Directory
cd /usr/share/nginx/html
ls

# Exit the Container Shell
exit


-------------------------------------------------------------------------------------------------------

Step 2.3: Inspect the Docker Container
# Inspect Container Details
docker inspect volume-demo1

# Extract Mounts Information in JSON Format
docker inspect --format='{{json .Mounts}}' volume-demo1

# Pretty-Print Mounts Information Using jq
docker inspect --format='{{json .Mounts}}' volume-demo1 | jq


-------------------------------------------------------------------------------------------------------


Step 2.4: Access the Application
# Access via Browser
http://localhost:8091

# Access via curl
curl http://localhost:8091

-------------------------------------------------------------------------------------------------------

Step 2.5: Using -v Flag with Read-Write Access
Command:

# Single Line Format
docker run --name volume-demo3 -p 8093:80 -v myvol103:/usr/share/nginx/html -d nginx:alpine-slim

# Readable Multi-Line Format
docker run \
    --name volume-demo3 \
    -p 8093:80 \
    -v myvol103:/usr/share/nginx/html \
    -d \
    nginx:alpine-slim


-------------------------------------------------------------------------------------------------------

Step 2.6: Verify the Volume Mount
# List Docker Containers
docker ps
docker ps --format "table {{.Image}}\t{{.Names}}\t{{.Status}}\t{{.ID}}\t{{.Ports}}"

# Connect to the Container
docker exec -it volume-demo3 /bin/sh

# Inside the Container: Check Disk Usage
df -h

# Navigate to the Mounted Directory
cd /usr/share/nginx/html
ls

# Exit the Container Shell
exit


-------------------------------------------------------------------------------------------------------

Step 2.7: Modify Content (Read-Write)
# Connect to the Container
docker exec -it volume-demo3 /bin/sh

# Inside the Container: Copy a File
cd /usr/share/nginx/html
cp index.html kalyan.html

# Exit the Container Shell
exit

# Access the New File via Browser
http://localhost:8093/kalyan.html

# Access the New File via curl
curl http://localhost:8093/kalyan.html


-------------------------------------------------------------------------------------------------------

Option 3: Mounting a Volume as Read-Only
Step 2.8: Using --mount Flag with Read-Only Access
# Single Line Format
docker run --name volume-demo4 -p 8094:80 --mount source=myvol103,target=/usr/share/nginx/html,readonly -d nginx:alpine-slim

# Readable Multi-Line Format
docker run \
    --name volume-demo4 \
    -p 8094:80 \
    --mount source=myvol103,target=/usr/share/nginx/html,readonly \
    -d \
    nginx:alpine-slim


-------------------------------------------------------------------------------------------------------

Step 2.9: Verify Read-Only Mount
# Connect to the Container
docker exec -it volume-demo4 /bin/sh

# Inside the Container: Attempt to Copy a File
cd /usr/share/nginx/html
cp index.html reddy.html

# Expected Output:
# cp: can't create 'reddy.html': Read-only file system

# Exit the Container Shell
exit

# Access the Application in Browser
http://localhost:8094


-------------------------------------------------------------------------------------------------------

Step 2.10: Using -v Flag with Read-Only Access
# Single Line Format
docker run --name volume-demo5 -p 8095:80 -v myvol103:/usr/share/nginx/html:ro -d nginx:alpine-slim

# Readable Multi-Line Format
  docker run \
      --name volume-demo5 \
      -p 8095:80 \
      -v myvol103:/usr/share/nginx/html:ro \
      -d \
      nginx:alpine-slim


-------------------------------------------------------------------------------------------------------

Step 2.11: Verify Read-Only Mount
# Connect to the Container
docker exec -it volume-demo5 /bin/sh

# Inside the Container: Attempt to Copy a File
cd /usr/share/nginx/html
cp index.html reddy.html

# Expected Output:
# cp: can't create 'reddy.html': Read-only file system

# Exit the Container Shell
exit

# Access the Application in Browser
http://localhost:8095/kalyan.html


-------------------------------------------------------------------------------------------------------

Step 3: Clean-Up - NO CLEANUP - VOLUME (myvol103) will be re-used in next demo

# Delete All Containers
docker rm -f $(docker ps -aq)

# Delete All Docker Images
docker rmi $(docker images -q)

# Optionally, remove specific volumes
docker volume rm myvol101 myvol102 myvol103


-------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------
