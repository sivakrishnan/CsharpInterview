



-------------------------------------------------------------------------------------------------------

Step 1: Prepare Host Directory with Static Content

Step 1.1: Review Directory Structure
# Review Directory
cd myfiles

-------------------------------------------------------------------------------------------------------
Step 2: Bind Mount Using --mount Flag (Read-Write)


Step 2.1: Run Docker Container with Bind Mount Using --mount
# Navigate to the 'myfiles' directory
cd myfiles

# Single-Line Format for linux and mac OS
docker run --name bind-demo1 -p 8091:80 --mount type=bind,source="$(pwd)"/static-content,target=/usr/share/nginx/html -d nginx:alpine-slim  

docker run --name bind-demo1 -p 8091:80 --mount type=bind,source=%cd%\static-content,target=/usr/share/nginx/html -d nginx:alpine-slim	



-------------------------------------------------------------------------------------------------------

# Readable Multi-Line Format
docker run \
  --name bind-demo1 \
  -p 8091:80 \
  --mount type=bind,source="$(pwd)"/static-content,target=/usr/share/nginx/html \
  -d \
  nginx:alpine-slim  

-------------------------------------------------------------------------------------------------------

Step 2.2: Verify the Bind Mount
# List Docker Containers
docker ps
docker ps --format "table {{.Image}}\t{{.Names}}\t{{.Status}}\t{{.ID}}\t{{.Ports}}"

# Connect to the Container
docker exec -it bind-demo1 /bin/sh

# Inside the Container: Check Disk Usage
df -h | grep html

# Navigate to the Mounted Directory
cd /usr/share/nginx/html
ls

# Attempt to Create a New File (Read-Write)
cp index.html kalyan.html

# Exit the Container Shell
exit


-------------------------------------------------------------------------------------------------------

Observations:

Mount Point Verification:

/usr/share/nginx/html is mounted to the static-content directory on the host.
Running df -h | grep html should show the mount point details.
Data Integrity:

The static-content directory's contents are accessible within the container.
Creating a new file (kalyan.html) demonstrates read-write access.
Accessing the Application:

Open a browser and navigate to http://localhost:8091 to view the static content.
Access http://localhost:8091/kalyan.html to verify the newly created file.


-------------------------------------------------------------------------------------------------------

Step 2.3: Inspect the Docker Container
# Inspect Docker Container
docker inspect bind-demo1

# Extract Mounts Information in JSON Format
docker inspect --format='{{json .Mounts}}' bind-demo1

# Pretty-Print Mounts Information Using jq
docker inspect --format='{{json .Mounts}}' bind-demo1 | jq 



Explanation:

Type: Indicates a bind mount.
Source: The directory on the host machine.
Destination: The directory inside the container where the bind mount is applied.
RW: true denotes read-write access.


-------------------------------------------------------------------------------------------------------

Step 2.5: Verify Using Docker Desktop
Open Docker Desktop.
Navigate to Containers:
Select bind-demo1.
Check Tabs:
Bind Mounts: Verify that /usr/share/nginx/html is mounted correctly.
Files: Browse to /usr/share/nginx/html to view the files.
Exec: Run df -h to confirm the mount point within the container.


-------------------------------------------------------------------------------------------------------

Step 3: Bind Mount Using -v Flag (Read-Write)
The -v or --volume flag provides a shorthand syntax for bind mounts.

Step 3.1: Run Docker Container with Bind Mount Using -v
# Navigate to the directory containing static content
cd myfiles

# Single-Line Format for linux and mac os
docker run --name bind-demo2 -p 8092:80 -v "$(pwd)"/static-content:/usr/share/nginx/html -d nginx:alpine-slim  

# Single-Line Format for windows
docker run --name bind-demo2 -p 8092:80 -v %cd%/static-content:/usr/share/nginx/html -d nginx:alpine-slim  


-------------------------------------------------------------------------------------------------------

# Readable Multi-Line Format
docker run \
  --name bind-demo2 \
  -p 8092:80 \
  -v "$(pwd)"/static-content:/usr/share/nginx/html \
  -d \
  nginx:alpine-slim  
Explanation:

--name bind-demo2: Names the container bind-demo2.
-p 8092:80: Maps host port 8092 to container port 80.
-v "$(pwd)"/static-content:/usr/share/nginx/html:
$(pwd)/static-content: The directory on the host machine to mount.
/usr/share/nginx/html: The directory inside the container where the host directory will be mounted.
-d nginx:alpine-slim: Runs the container in detached mode using the Nginx Alpine image.



-------------------------------------------------------------------------------------------------------


Step 3.2: Verify the Bind Mount
# List Docker Containers
docker ps
docker ps --format "table {{.Image}}\t{{.Names}}\t{{.Status}}\t{{.ID}}\t{{.Ports}}"

# Connect to the Container
docker exec -it bind-demo2 /bin/sh

# Inside the Container: Check Disk Usage
df -h | grep html

# Navigate to the Mounted Directory
cd /usr/share/nginx/html
ls

# Attempt to Create a New File (Read-Write)
cp index.html kalyan2.html

# Exit the Container Shell
exit

-------------------------------------------------------------------------------------------------------

Observations:

Mount Point Verification:

/usr/share/nginx/html is mounted to the static-content directory on the host.
Running df -h | grep html should show the mount point details.
Data Integrity:

The static-content directory's contents are accessible within the container.
Creating a new file (kalyan2.html) demonstrates read-write access.
Accessing the Application:

Open a browser and navigate to http://localhost:8092 to view the static content.
Access http://localhost:8092/kalyan2.html to verify the newly created file.


-------------------------------------------------------------------------------------------------------

Step 3.3: Inspect the Docker Container
# Inspect Docker Container
docker inspect bind-demo2

# Extract Mounts Information in JSON Format
docker inspect --format='{{json .Mounts}}' bind-demo2

# Pretty-Print Mounts Information Using jq
docker inspect --format='{{json .Mounts}}' bind-demo2 | jq  
Explanation:

Type: Indicates a bind mount.
Source: The directory on the host machine.
Destination: The directory inside the container where the bind mount is applied.
RW: true denotes read-write access.


-------------------------------------------------------------------------------------------------------

Step 3.5: Verify Using Docker Desktop
Open Docker Desktop.
Navigate to Containers:
Select bind-demo2.
Check Tabs:
Bind Mounts: Verify that /usr/share/nginx/html is mounted correctly.
Files: Browse to /usr/share/nginx/html to view the files.
Exec: Run df -h to confirm the mount point within the container.


-------------------------------------------------------------------------------------------------------

Step 4: Verify Files in Local Directory
After performing operations inside the containers, it's crucial to verify that changes are reflected on the host machine.

# Navigate to the static-content directory on the host
cd myfiles/static-content

# List Files
ls
Observation:

You should find the files kalyan.html and kalyan2.html present.
kalyan.html: Created by bind-demo1.
kalyan2.html: Created by bind-demo2.Step 5: Clean-Up
After completing the demonstrations, it's important to clean up Docker resources to free up system resources and maintain a tidy environment.

# Delete Docker Containers
docker rm -f $(docker ps -aq)

# Delete Docker Images
docker rmi $(docker images -q)

# List Docker Volumes
docker volume ls

# Observation: 
# Volumes will persist and are not deleted even after deleting containers or images

# Delete Specific Volume
docker volume rm myvol103



-------------------------------------------------------------------------------------------------------

Step 5: Clean-Up
After completing the demonstrations, it's important to clean up Docker resources to free up system resources and maintain a tidy environment.

# Delete Docker Containers
docker rm -f $(docker ps -aq)

# Delete Docker Images
docker rmi $(docker images -q)

# List Docker Volumes
docker volume ls

# Observation: 
# Volumes will persist and are not deleted even after deleting containers or images

# Delete Specific Volume
docker volume rm myvol103



-------------------------------------------------------------------------------------------------------
