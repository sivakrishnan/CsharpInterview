
Step 1: Introduction to tmpfs Mounts
Before diving into using tmpfs mounts, it's essential to understand what they are and when to use them.

tmpfs Mounts:
Store data in the host system's RAM.
Data is ephemeral and does not persist after the container stops.
Ideal for temporary storage needs, such as caching or sensitive data that shouldn't be written to disk.

-------------------------------------------------------------------------------------------------------

This section demonstrates how to create and use a tmpfs mount within a Docker container.

Step 2.1: Run a Docker Container with tmpfs Mount
# Run a Docker container with a tmpfs mount at /app
docker run --name tmpfs-demo --mount type=tmpfs,destination=/app -d nginx:alpine-slim
Explanation:

--name tmpfs-demo: Names the container tmpfs-demo.
--mount type=tmpfs,destination=/app:
type=tmpfs: Specifies that a tmpfs mount is being used.
destination=/app: The directory inside the container where the tmpfs mount will be attached.
-d nginx:alpine-slim: Runs the container in detached mode using the lightweight Nginx Alpine image.

-------------------------------------------------------------------------------------------------------

Step 2.2: Verify the tmpfs Mount
# List running Docker containers
docker ps

# Inspect the tmpfs mount details
docker inspect tmpfs-demo --format '{{ json .Mounts }}'
Explanation:

Type: Indicates a tmpfs mount.
Destination: The mount point inside the container (/app).
RW: true denotes read-write access to the tmpfs mount.

-------------------------------------------------------------------------------------------------------

Step 2.3: Test tmpfs Mount Persistence
# Connect to the container
docker exec -it tmpfs-demo /bin/sh

# Inside the container: Check disk usage to confirm tmpfs mount
df -h | grep /app

# Navigate to the tmpfs mount directory
cd /app
ls

# Create sample files within the tmpfs mount
echo "file1 content" > file1.html
echo "file2 content" > file2.html
ls

# Exit the container shell
exit

# Stop the Docker container
docker stop tmpfs-demo

# Start the Docker container again
docker start tmpfs-demo

# Reconnect to the container
docker exec -it tmpfs-demo /bin/sh

# Inside the container: Verify the tmpfs mount contents
df -h | grep /app
cd /app
ls
exit

# Observation:
# 1. The /app directory is empty after restarting the container.
# 2. Files created inside the tmpfs mount do not persist across container restarts.


-------------------------------------------------------------------------------------------------------

Step 3: Additional tmpfs Options
Docker allows you to specify additional options for tmpfs mounts to control their behavior.

Step 3.1: Verify Size of tmpfs Mount
By default, tmpfs mounts have a maximum size of 50% of the host's total RAM. You can customize this using the tmpfs-size option.

# Run a Docker container with a tmpfs mount of 100MB
docker run --name tmpfs-demo-size --mount type=tmpfs,destination=/app,tmpfs-size=100m -d nginx:alpine-slim

# Inspect the container to verify tmpfs size
docker inspect tmpfs-demo-size --format '{{ json .Mounts }}' | jq


-------------------------------------------------------------------------------------------------------

Sample Output:

[
  {
    "Type": "tmpfs",
    "Source": "",
    "Destination": "/app",
    "Mode": "",
    "RW": true,
    "Propagation": "",
    "Options": {
      "size": "100m"
    }
  }
]


-------------------------------------------------------------------------------------------------------

Step 4: Limitations of tmpfs Mounts
While tmpfs mounts offer benefits, they also come with certain limitations:

Ephemeral Storage:

Data stored in tmpfs mounts does not persist after the container stops.
Not suitable for data that needs to be retained across container restarts.
No Sharing Between Containers:

Unlike Docker volumes, tmpfs mounts cannot be shared between multiple containers.
Memory Consumption:

tmpfs mounts consume RAM. Excessive use can lead to memory exhaustion on the host.


-------------------------------------------------------------------------------------------------------

Step 5: Clean-Up
After completing the demonstrations, it's important to clean up Docker resources to free up system resources and maintain a tidy environment.

# Delete All Docker Containers
docker rm -f $(docker ps -aq)

# Delete All Docker Images
docker rmi $(docker images -q)

# Optionally, remove unused Docker volumes
docker volume prune -f


-------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------